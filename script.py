import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# load and investigate the data:
df = pd.read_csv("tennis_stats.csv")
print(df.head())
print(df.info())

# exploratory analysis:
plt.figure()
plt.title("Correlation Between the # of Aces and the Money Won by Each Player")
plt.scatter(df["Aces"], df["Winnings"])
plt.xlabel("# of Aces")
plt.ylabel("Money Won ($)")
plt.show()

plt.figure()
plt.title("Correlation Between the # of Double Faults and the Money Won by Each Player")
plt.scatter(df["DoubleFaults"], df["Winnings"])
plt.xlabel("# of Double Faults")
plt.ylabel("Money Won ($)")
plt.show()

## single feature linear regressions:
aces_train, aces_test, winnings_train, winnings_test = train_test_split(df[["Aces"]], df[["Winnings"]], train_size=0.8)
model = LinearRegression()
model.fit(aces_train, winnings_train)
aces_score = model.score(aces_test, winnings_test)
prediction = model.predict(aces_test)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based Only on the # of Aces on the Test Set")
plt.scatter(winnings_test, prediction, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, aces only: {aces_score}")

faults_train, faults_test, winnings_train_2, winnings_test_2 = train_test_split(df[["DoubleFaults"]], df[["Winnings"]], train_size=0.8)
model_2 = LinearRegression()
model_2.fit(faults_train, winnings_train_2)
faults_score = model_2.score(faults_test, winnings_test_2)
prediction_2 = model_2.predict(faults_test)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based Only on the # of Double Faults on the Test Set")
plt.scatter(winnings_test_2, prediction_2, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, faults only: {faults_score}")

wins_train, wins_test, winnings_train_3, winnings_test_3 = train_test_split(df[["Wins"]], df[["Winnings"]], train_size=0.8)
model_3 = LinearRegression()
model_3.fit(wins_train, winnings_train_3)
wins_score = model_3.score(wins_test, winnings_test_3)
prediction_3 = model_3.predict(wins_test)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based Only on the # of Wins on the Test Set")
plt.scatter(winnings_test_3, prediction_3, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, wins only: {wins_score}")

## two feature linear regressions:
features_train, features_test, winnings_train_4, winnings_test_4 = train_test_split(df[["Wins", "Aces"]], df[["Winnings"]], train_size=0.8)
model_4 = LinearRegression()
model_4.fit(features_train, winnings_train_4)
features_score = model_4.score(features_test, winnings_test_4)
prediction_4 = model_4.predict(features_test)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based on the # of Wins and the # of Aces on the Test Set")
plt.scatter(winnings_test_4, prediction_4, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, wins and aces: {features_score}")

features_train_2, features_test_2, winnings_train_5, winnings_test_5 = train_test_split(df[["Wins", "DoubleFaults"]], df[["Winnings"]], train_size=0.8)
model_5 = LinearRegression()
model_5.fit(features_train_2, winnings_train_5)
features_score_2 = model_5.score(features_test_2, winnings_test_5)
prediction_5 = model_5.predict(features_test_2)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based on the # of Wins and the # of Double Faults on the Test Set")
plt.scatter(winnings_test_5, prediction_5, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, wins and double faults: {features_score_2}")

## multiple feature linear regressions:
features_train_3, features_test_3, winnings_train_6, winnings_test_6 = train_test_split(df[["Wins", "DoubleFaults", "Aces"]], df[["Winnings"]], train_size=0.8)
model_6 = LinearRegression()
model_6.fit(features_train_3, winnings_train_6)
features_score_3 = model_6.score(features_test_3, winnings_test_6)
prediction_6 = model_6.predict(features_test_3)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based on the # of Wins, the # of Double Faults and the # of Aces on the Test Set")
plt.scatter(winnings_test_6, prediction_6, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, wins, double faults and aces: {features_score_3}")

features_train_4, features_test_4, winnings_train_7, winnings_test_7 = train_test_split(df[["Wins", "DoubleFaults", "Aces", "FirstServePointsWon"]], df[["Winnings"]], train_size=0.8)
model_7 = LinearRegression()
model_7.fit(features_train_4, winnings_train_7)
features_score_4 = model_7.score(features_test_4, winnings_test_7)
prediction_7 = model_7.predict(features_test_4)
plt.figure()
plt.title("Accuracy of The Linear Regression Model Based on the # of Wins, the # of Double Faults, the # of Aces and the # of Points Won with a First Serve on the Test Set")
plt.scatter(winnings_test_7, prediction_7, alpha=0.4)
plt.xlabel("Money Won ($)")
plt.ylabel("Money Won: Prediction ($)")
plt.show()
print(f"Coefficient of determination, wins, double faults, aces and first serve points: {features_score_4}")
